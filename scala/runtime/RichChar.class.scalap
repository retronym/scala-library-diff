package scala.runtime
final class RichChar extends scala.AnyVal with scala.runtime.IntegralProxy[scala.Char] {
  val self: scala.Char = { /* compiled code */ }
  def this(self: scala.Char) = { /* compiled code */ }
  protected def num: scala.math.Numeric.CharIsIntegral.type = { /* compiled code */ }
  protected def ord: scala.math.Ordering.Char.type = { /* compiled code */ }
  override def doubleValue(): scala.Double = { /* compiled code */ }
  override def floatValue(): scala.Float = { /* compiled code */ }
  override def longValue(): scala.Long = { /* compiled code */ }
  override def intValue(): scala.Int = { /* compiled code */ }
  override def byteValue(): scala.Byte = { /* compiled code */ }
  override def shortValue(): scala.Short = { /* compiled code */ }
  override def isValidChar: scala.Boolean = { /* compiled code */ }
  override def abs: scala.Char = { /* compiled code */ }
  override def max(that: scala.Char): scala.Char = { /* compiled code */ }
  override def min(that: scala.Char): scala.Char = { /* compiled code */ }
  override def signum: scala.Int = { /* compiled code */ }
  def asDigit: scala.Int = { /* compiled code */ }
  def isControl: scala.Boolean = { /* compiled code */ }
  def isDigit: scala.Boolean = { /* compiled code */ }
  def isLetter: scala.Boolean = { /* compiled code */ }
  def isLetterOrDigit: scala.Boolean = { /* compiled code */ }
  def isWhitespace: scala.Boolean = { /* compiled code */ }
  def isSpaceChar: scala.Boolean = { /* compiled code */ }
  def isHighSurrogate: scala.Boolean = { /* compiled code */ }
  def isLowSurrogate: scala.Boolean = { /* compiled code */ }
  def isSurrogate: scala.Boolean = { /* compiled code */ }
  def isUnicodeIdentifierStart: scala.Boolean = { /* compiled code */ }
  def isUnicodeIdentifierPart: scala.Boolean = { /* compiled code */ }
  def isIdentifierIgnorable: scala.Boolean = { /* compiled code */ }
  def isMirrored: scala.Boolean = { /* compiled code */ }
  def isLower: scala.Boolean = { /* compiled code */ }
  def isUpper: scala.Boolean = { /* compiled code */ }
  def isTitleCase: scala.Boolean = { /* compiled code */ }
  def toLower: scala.Char = { /* compiled code */ }
  def toUpper: scala.Char = { /* compiled code */ }
  def toTitleCase: scala.Char = { /* compiled code */ }
  def getType: scala.Int = { /* compiled code */ }
  def getNumericValue: scala.Int = { /* compiled code */ }
  def getDirectionality: scala.Byte = { /* compiled code */ }
  def reverseBytes: scala.Char = { /* compiled code */ }
  override def hashCode(): scala.Int = { /* compiled code */ }
  override def equals(x$1: scala.Any): scala.Boolean = { /* compiled code */ }
}
object RichChar extends scala.AnyRef {
  def this() = { /* compiled code */ }
  final def num$extension($this: scala.runtime.RichChar): scala.math.Numeric.CharIsIntegral.type = { /* compiled code */ }
  final def ord$extension($this: scala.runtime.RichChar): scala.math.Ordering.Char.type = { /* compiled code */ }
  final def doubleValue$extension($this: scala.runtime.RichChar)(): scala.Double = { /* compiled code */ }
  final def floatValue$extension($this: scala.runtime.RichChar)(): scala.Float = { /* compiled code */ }
  final def longValue$extension($this: scala.runtime.RichChar)(): scala.Long = { /* compiled code */ }
  final def intValue$extension($this: scala.runtime.RichChar)(): scala.Int = { /* compiled code */ }
  final def byteValue$extension($this: scala.runtime.RichChar)(): scala.Byte = { /* compiled code */ }
  final def shortValue$extension($this: scala.runtime.RichChar)(): scala.Short = { /* compiled code */ }
  final def isValidChar$extension($this: scala.runtime.RichChar): scala.Boolean = { /* compiled code */ }
  final def abs$extension($this: scala.runtime.RichChar): scala.Char = { /* compiled code */ }
  final def max$extension($this: scala.runtime.RichChar)(that: scala.Char): scala.Char = { /* compiled code */ }
  final def min$extension($this: scala.runtime.RichChar)(that: scala.Char): scala.Char = { /* compiled code */ }
  final def signum$extension($this: scala.runtime.RichChar): scala.Int = { /* compiled code */ }
  final def asDigit$extension($this: scala.runtime.RichChar): scala.Int = { /* compiled code */ }
  final def isControl$extension($this: scala.runtime.RichChar): scala.Boolean = { /* compiled code */ }
  final def isDigit$extension($this: scala.runtime.RichChar): scala.Boolean = { /* compiled code */ }
  final def isLetter$extension($this: scala.runtime.RichChar): scala.Boolean = { /* compiled code */ }
  final def isLetterOrDigit$extension($this: scala.runtime.RichChar): scala.Boolean = { /* compiled code */ }
  final def isWhitespace$extension($this: scala.runtime.RichChar): scala.Boolean = { /* compiled code */ }
  final def isSpaceChar$extension($this: scala.runtime.RichChar): scala.Boolean = { /* compiled code */ }
  final def isHighSurrogate$extension($this: scala.runtime.RichChar): scala.Boolean = { /* compiled code */ }
  final def isLowSurrogate$extension($this: scala.runtime.RichChar): scala.Boolean = { /* compiled code */ }
  final def isSurrogate$extension($this: scala.runtime.RichChar): scala.Boolean = { /* compiled code */ }
  final def isUnicodeIdentifierStart$extension($this: scala.runtime.RichChar): scala.Boolean = { /* compiled code */ }
  final def isUnicodeIdentifierPart$extension($this: scala.runtime.RichChar): scala.Boolean = { /* compiled code */ }
  final def isIdentifierIgnorable$extension($this: scala.runtime.RichChar): scala.Boolean = { /* compiled code */ }
  final def isMirrored$extension($this: scala.runtime.RichChar): scala.Boolean = { /* compiled code */ }
  final def isLower$extension($this: scala.runtime.RichChar): scala.Boolean = { /* compiled code */ }
  final def isUpper$extension($this: scala.runtime.RichChar): scala.Boolean = { /* compiled code */ }
  final def isTitleCase$extension($this: scala.runtime.RichChar): scala.Boolean = { /* compiled code */ }
  final def toLower$extension($this: scala.runtime.RichChar): scala.Char = { /* compiled code */ }
  final def toUpper$extension($this: scala.runtime.RichChar): scala.Char = { /* compiled code */ }
  final def toTitleCase$extension($this: scala.runtime.RichChar): scala.Char = { /* compiled code */ }
  final def getType$extension($this: scala.runtime.RichChar): scala.Int = { /* compiled code */ }
  final def getNumericValue$extension($this: scala.runtime.RichChar): scala.Int = { /* compiled code */ }
  final def getDirectionality$extension($this: scala.runtime.RichChar): scala.Byte = { /* compiled code */ }
  final def reverseBytes$extension($this: scala.runtime.RichChar): scala.Char = { /* compiled code */ }
  final def hashCode$extension($this: scala.runtime.RichChar)(): scala.Int = { /* compiled code */ }
  final def equals$extension($this: scala.runtime.RichChar)(x$1: scala.Any): scala.Boolean = { /* compiled code */ }
}
