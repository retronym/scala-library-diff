package scala.runtime
final class RichDouble extends scala.AnyVal with scala.runtime.FractionalProxy[scala.Double] {
  val self: scala.Double = { /* compiled code */ }
  def this(self: scala.Double) = { /* compiled code */ }
  protected def num: scala.math.Numeric.DoubleIsFractional.type = { /* compiled code */ }
  protected def ord: scala.math.Ordering.Double.type = { /* compiled code */ }
  protected def integralNum: scala.math.Numeric.DoubleAsIfIntegral.type = { /* compiled code */ }
  override def doubleValue(): scala.Double = { /* compiled code */ }
  override def floatValue(): scala.Float = { /* compiled code */ }
  override def longValue(): scala.Long = { /* compiled code */ }
  override def intValue(): scala.Int = { /* compiled code */ }
  override def byteValue(): scala.Byte = { /* compiled code */ }
  override def shortValue(): scala.Short = { /* compiled code */ }
  override def isWhole(): scala.Boolean = { /* compiled code */ }
  override def isValidByte: scala.Boolean = { /* compiled code */ }
  override def isValidShort: scala.Boolean = { /* compiled code */ }
  override def isValidChar: scala.Boolean = { /* compiled code */ }
  override def isValidInt: scala.Boolean = { /* compiled code */ }
  def isNaN: scala.Boolean = { /* compiled code */ }
  def isInfinity: scala.Boolean = { /* compiled code */ }
  def isPosInfinity: scala.Boolean = { /* compiled code */ }
  def isNegInfinity: scala.Boolean = { /* compiled code */ }
  override def abs: scala.Double = { /* compiled code */ }
  override def max(that: scala.Double): scala.Double = { /* compiled code */ }
  override def min(that: scala.Double): scala.Double = { /* compiled code */ }
  override def signum: scala.Int = { /* compiled code */ }
  def round: scala.Long = { /* compiled code */ }
  def ceil: scala.Double = { /* compiled code */ }
  def floor: scala.Double = { /* compiled code */ }
  def toRadians: scala.Double = { /* compiled code */ }
  def toDegrees: scala.Double = { /* compiled code */ }
  override def hashCode(): scala.Int = { /* compiled code */ }
  override def equals(x$1: scala.Any): scala.Boolean = { /* compiled code */ }
}
object RichDouble extends scala.AnyRef {
  def this() = { /* compiled code */ }
  final def num$extension($this: scala.runtime.RichDouble): scala.math.Numeric.DoubleIsFractional.type = { /* compiled code */ }
  final def ord$extension($this: scala.runtime.RichDouble): scala.math.Ordering.Double.type = { /* compiled code */ }
  final def integralNum$extension($this: scala.runtime.RichDouble): scala.math.Numeric.DoubleAsIfIntegral.type = { /* compiled code */ }
  final def doubleValue$extension($this: scala.runtime.RichDouble)(): scala.Double = { /* compiled code */ }
  final def floatValue$extension($this: scala.runtime.RichDouble)(): scala.Float = { /* compiled code */ }
  final def longValue$extension($this: scala.runtime.RichDouble)(): scala.Long = { /* compiled code */ }
  final def intValue$extension($this: scala.runtime.RichDouble)(): scala.Int = { /* compiled code */ }
  final def byteValue$extension($this: scala.runtime.RichDouble)(): scala.Byte = { /* compiled code */ }
  final def shortValue$extension($this: scala.runtime.RichDouble)(): scala.Short = { /* compiled code */ }
  final def isWhole$extension($this: scala.runtime.RichDouble)(): scala.Boolean = { /* compiled code */ }
  final def isValidByte$extension($this: scala.runtime.RichDouble): scala.Boolean = { /* compiled code */ }
  final def isValidShort$extension($this: scala.runtime.RichDouble): scala.Boolean = { /* compiled code */ }
  final def isValidChar$extension($this: scala.runtime.RichDouble): scala.Boolean = { /* compiled code */ }
  final def isValidInt$extension($this: scala.runtime.RichDouble): scala.Boolean = { /* compiled code */ }
  final def isNaN$extension($this: scala.runtime.RichDouble): scala.Boolean = { /* compiled code */ }
  final def isInfinity$extension($this: scala.runtime.RichDouble): scala.Boolean = { /* compiled code */ }
  final def isPosInfinity$extension($this: scala.runtime.RichDouble): scala.Boolean = { /* compiled code */ }
  final def isNegInfinity$extension($this: scala.runtime.RichDouble): scala.Boolean = { /* compiled code */ }
  final def abs$extension($this: scala.runtime.RichDouble): scala.Double = { /* compiled code */ }
  final def max$extension($this: scala.runtime.RichDouble)(that: scala.Double): scala.Double = { /* compiled code */ }
  final def min$extension($this: scala.runtime.RichDouble)(that: scala.Double): scala.Double = { /* compiled code */ }
  final def signum$extension($this: scala.runtime.RichDouble): scala.Int = { /* compiled code */ }
  final def round$extension($this: scala.runtime.RichDouble): scala.Long = { /* compiled code */ }
  final def ceil$extension($this: scala.runtime.RichDouble): scala.Double = { /* compiled code */ }
  final def floor$extension($this: scala.runtime.RichDouble): scala.Double = { /* compiled code */ }
  final def toRadians$extension($this: scala.runtime.RichDouble): scala.Double = { /* compiled code */ }
  final def toDegrees$extension($this: scala.runtime.RichDouble): scala.Double = { /* compiled code */ }
  final def hashCode$extension($this: scala.runtime.RichDouble)(): scala.Int = { /* compiled code */ }
  final def equals$extension($this: scala.runtime.RichDouble)(x$1: scala.Any): scala.Boolean = { /* compiled code */ }
}
