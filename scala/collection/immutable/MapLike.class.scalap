package scala.collection.immutable
trait MapLike[A, +B, +This <: scala.collection.immutable.MapLike[A, B, This] with scala.collection.immutable.Map[A, B]] extends scala.AnyRef with scala.collection.MapLike[A, B, This] with scala.collection.Parallelizable[scala.Tuple2[A, B], scala.collection.parallel.immutable.ParMap[A, B]] {
 this: scala.collection.immutable.MapLike[A, B, This] =>
  def $init$(): scala.Unit = { /* compiled code */ }
  override def updated[B1 >: B](key: A, value: B1): scala.collection.immutable.Map[A, B1] = { /* compiled code */ }
  def +[B1 >: B](kv: scala.Tuple2[A, B1]): scala.collection.immutable.Map[A, B1]
  override def +[B1 >: B](elem1: scala.Tuple2[A, B1], elem2: scala.Tuple2[A, B1], elems: scala.Tuple2[A, B1]*): scala.collection.immutable.Map[A, B1] = { /* compiled code */ }
  override def ++[B1 >: B](xs: scala.collection.GenTraversableOnce[scala.Tuple2[A, B1]]): scala.collection.immutable.Map[A, B1] = { /* compiled code */ }
  override def filterKeys(p: scala.Function1[A, scala.Boolean]): scala.collection.immutable.Map[A, B] = { /* compiled code */ }
  override def mapValues[C](f: scala.Function1[B, C]): scala.collection.immutable.Map[A, C] = { /* compiled code */ }
  override def keySet: scala.collection.immutable.Set[A] = { /* compiled code */ }
  protected class ImmutableDefaultKeySet extends scala.collection.MapLike.DefaultKeySet with scala.collection.immutable.Set[A] {
    def this() = { /* compiled code */ }
    override def +(elem: A): scala.collection.immutable.Set[A] = { /* compiled code */ }
    override def -(elem: A): scala.collection.immutable.Set[A] = { /* compiled code */ }
  }
  def transform[C, That](f: scala.Function2[A, B, C])(implicit bf: scala.collection.generic.CanBuildFrom[This, scala.Tuple2[A, C], That]): That = { /* compiled code */ }
}
