package scala.collection.immutable
@scala.deprecated("Proxying is deprecated due to lack of use and compiler-level support.")
trait MapProxy[A, +B] extends scala.AnyRef with scala.collection.immutable.Map[A, B] with scala.collection.MapProxyLike[A, B, scala.collection.immutable.Map[A, B]] {
  def $init$(): scala.Unit = { /* compiled code */ }
  override def repr: scala.collection.immutable.MapProxy[A, B] = { /* compiled code */ }
  override def empty: scala.collection.immutable.MapProxy[A, B] = { /* compiled code */ }
  override def updated[B1 >: B](key: A, value: B1): scala.collection.immutable.MapProxy[A, B1] = { /* compiled code */ }
  override def -(key: A): scala.collection.immutable.MapProxy[A, B] = { /* compiled code */ }
  override def +[B1 >: B](kv: scala.Tuple2[A, B1]): scala.collection.immutable.Map[A, B1] = { /* compiled code */ }
  override def +[B1 >: B](elem1: scala.Tuple2[A, B1], elem2: scala.Tuple2[A, B1], elems: scala.Tuple2[A, B1]*): scala.collection.immutable.MapProxy[A, B1] = { /* compiled code */ }
  override def ++[B1 >: B](xs: scala.collection.GenTraversableOnce[scala.Tuple2[A, B1]]): scala.collection.immutable.MapProxy[A, B1] = { /* compiled code */ }
  override def keySet: scala.collection.immutable.Set[A] = { /* compiled code */ }
  override def filterKeys(p: scala.Function1[A, scala.Boolean]): scala.collection.immutable.Map[A, B] = { /* compiled code */ }
  override def mapValues[C](f: scala.Function1[B, C]): scala.collection.immutable.Map[A, C] = { /* compiled code */ }
}
