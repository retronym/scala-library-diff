package scala.collection.immutable
sealed abstract class IntMap[+T] extends scala.collection.immutable.AbstractMap[scala.collection.generic.BitOperations.Int.Int, T] with scala.collection.immutable.Map[scala.collection.generic.BitOperations.Int.Int, T] with scala.collection.immutable.MapLike[scala.collection.generic.BitOperations.Int.Int, T, scala.collection.immutable.IntMap[T]] {
  def this() = { /* compiled code */ }
  override def empty: scala.collection.immutable.IntMap[T] = { /* compiled code */ }
  override def toList: scala.collection.immutable.List[scala.Tuple2[scala.collection.generic.BitOperations.Int.Int, T]] = { /* compiled code */ }
  def iterator: scala.collection.Iterator[scala.Tuple2[scala.collection.generic.BitOperations.Int.Int, T]] = { /* compiled code */ }
  final override def foreach[U](f: scala.Function1[scala.Tuple2[scala.collection.generic.BitOperations.Int.Int, T], U]): scala.Unit = { /* compiled code */ }
  override def keysIterator: scala.collection.Iterator[scala.collection.generic.BitOperations.Int.Int] = { /* compiled code */ }
  final def foreachKey(f: scala.Function1[scala.collection.generic.BitOperations.Int.Int, scala.Unit]): scala.Unit = { /* compiled code */ }
  override def valuesIterator: scala.collection.Iterator[T] = { /* compiled code */ }
  final def foreachValue(f: scala.Function1[T, scala.Unit]): scala.Unit = { /* compiled code */ }
  override def stringPrefix: java.lang.String = { /* compiled code */ }
  override def isEmpty: scala.Boolean = { /* compiled code */ }
  override def filter(f: scala.Function1[scala.Tuple2[scala.collection.generic.BitOperations.Int.Int, T], scala.Boolean]): scala.collection.immutable.IntMap[T] = { /* compiled code */ }
  def transform[S](f: scala.Function2[scala.collection.generic.BitOperations.Int.Int, T, S]): scala.collection.immutable.IntMap[S] = { /* compiled code */ }
  final override def size: scala.collection.generic.BitOperations.Int.Int = { /* compiled code */ }
  final def get(key: scala.collection.generic.BitOperations.Int.Int): scala.Option[T] = { /* compiled code */ }
  final override def getOrElse[S >: T](key: scala.collection.generic.BitOperations.Int.Int, default: => S): S = { /* compiled code */ }
  final override def apply(key: scala.collection.generic.BitOperations.Int.Int): T = { /* compiled code */ }
  def +[S >: T](kv: scala.Tuple2[scala.collection.generic.BitOperations.Int.Int, S]): scala.collection.immutable.IntMap[S] = { /* compiled code */ }
  override def updated[S >: T](key: scala.collection.generic.BitOperations.Int.Int, value: S): scala.collection.immutable.IntMap[S] = { /* compiled code */ }
  def updateWith[S >: T](key: scala.collection.generic.BitOperations.Int.Int, value: S, f: scala.Function2[T, S, S]): scala.collection.immutable.IntMap[S] = { /* compiled code */ }
  def -(key: scala.collection.generic.BitOperations.Int.Int): scala.collection.immutable.IntMap[T] = { /* compiled code */ }
  def modifyOrRemove[S](f: scala.Function2[scala.collection.generic.BitOperations.Int.Int, T, scala.Option[S]]): scala.collection.immutable.IntMap[S] = { /* compiled code */ }
  def unionWith[S >: T](that: scala.collection.immutable.IntMap[S], f: scala.Function3[scala.collection.generic.BitOperations.Int.Int, S, S, S]): scala.collection.immutable.IntMap[S] = { /* compiled code */ }
  def intersectionWith[S, R](that: scala.collection.immutable.IntMap[S], f: scala.Function3[scala.collection.generic.BitOperations.Int.Int, T, S, R]): scala.collection.immutable.IntMap[R] = { /* compiled code */ }
  def intersection[R](that: scala.collection.immutable.IntMap[R]): scala.collection.immutable.IntMap[T] = { /* compiled code */ }
  def ++[S >: T](that: scala.collection.immutable.IntMap[S]): scala.collection.immutable.IntMap[S] = { /* compiled code */ }
  @scala.annotation.tailrec
  final def firstKey: scala.collection.generic.BitOperations.Int.Int = { /* compiled code */ }
  @scala.annotation.tailrec
  final def lastKey: scala.collection.generic.BitOperations.Int.Int = { /* compiled code */ }
}
object IntMap extends scala.AnyRef {
  def this() = { /* compiled code */ }
  implicit def canBuildFrom[A, B]: scala.AnyRef with scala.collection.generic.CanBuildFrom[scala.collection.immutable.IntMap[A], scala.Tuple2[scala.collection.generic.BitOperations.Int.Int, B], scala.collection.immutable.IntMap[B]] = { /* compiled code */ }
  private[immutable] case class Bin[+T](prefix: scala.collection.generic.BitOperations.Int.Int, mask: scala.collection.generic.BitOperations.Int.Int, left: scala.collection.immutable.IntMap[T], right: scala.collection.immutable.IntMap[T]) extends scala.collection.immutable.IntMap[T] with scala.Product with scala.Serializable {
    val prefix: scala.collection.generic.BitOperations.Int.Int = { /* compiled code */ }
    val mask: scala.collection.generic.BitOperations.Int.Int = { /* compiled code */ }
    val left: scala.collection.immutable.IntMap[T] = { /* compiled code */ }
    val right: scala.collection.immutable.IntMap[T] = { /* compiled code */ }
    def bin[S](left: scala.collection.immutable.IntMap[S], right: scala.collection.immutable.IntMap[S]): scala.collection.immutable.IntMap[S] = { /* compiled code */ }
    def copy[T](prefix: scala.collection.generic.BitOperations.Int.Int, mask: scala.collection.generic.BitOperations.Int.Int, left: scala.collection.immutable.IntMap[T], right: scala.collection.immutable.IntMap[T]): scala.collection.immutable.IntMap.Bin[T] = { /* compiled code */ }
    override def productPrefix: java.lang.String = { /* compiled code */ }
    def productArity: scala.Int = { /* compiled code */ }
    def productElement(x$1: scala.Int): scala.Any = { /* compiled code */ }
    override def productIterator: scala.collection.Iterator[scala.Any] = { /* compiled code */ }
  }
  private[immutable] case class Tip[+T](key: scala.collection.generic.BitOperations.Int.Int, value: T) extends scala.collection.immutable.IntMap[T] with scala.Product with scala.Serializable {
    val key: scala.collection.generic.BitOperations.Int.Int = { /* compiled code */ }
    val value: T = { /* compiled code */ }
    def withValue[S](s: S): scala.collection.immutable.IntMap.Tip[S] = { /* compiled code */ }
    def copy[T](key: scala.collection.generic.BitOperations.Int.Int, value: T): scala.collection.immutable.IntMap.Tip[T] = { /* compiled code */ }
    override def productPrefix: java.lang.String = { /* compiled code */ }
    def productArity: scala.Int = { /* compiled code */ }
    def productElement(x$1: scala.Int): scala.Any = { /* compiled code */ }
    override def productIterator: scala.collection.Iterator[scala.Any] = { /* compiled code */ }
  }
  def empty[T]: scala.collection.immutable.IntMap[T] = { /* compiled code */ }
  def singleton[T](key: scala.collection.generic.BitOperations.Int.Int, value: T): scala.collection.immutable.IntMap[T] = { /* compiled code */ }
  def apply[T](elems: scala.Tuple2[scala.collection.generic.BitOperations.Int.Int, T]*): scala.collection.immutable.IntMap[T] = { /* compiled code */ }
  private[immutable] case object Nil extends scala.collection.immutable.IntMap[scala.Nothing] with scala.Product with scala.Serializable {
    override def equals(that: scala.Any): scala.Boolean = { /* compiled code */ }
    override def productPrefix: java.lang.String = { /* compiled code */ }
    def productArity: scala.Int = { /* compiled code */ }
    def productElement(x$1: scala.Int): scala.Any = { /* compiled code */ }
    override def productIterator: scala.collection.Iterator[scala.Any] = { /* compiled code */ }
  }
  private[immutable] object Tip extends scala.AnyRef with scala.Serializable {
    def this() = { /* compiled code */ }
    final override def toString(): java.lang.String = { /* compiled code */ }
    def apply[T](key: scala.collection.generic.BitOperations.Int.Int, value: T): scala.collection.immutable.IntMap.Tip[T] = { /* compiled code */ }
    def unapply[T](x$0: scala.collection.immutable.IntMap.Tip[T]): scala.Option[scala.Tuple2[scala.collection.generic.BitOperations.Int.Int, T]] = { /* compiled code */ }
  }
  private[immutable] object Bin extends scala.AnyRef with scala.Serializable {
    def this() = { /* compiled code */ }
    final override def toString(): java.lang.String = { /* compiled code */ }
    def apply[T](prefix: scala.collection.generic.BitOperations.Int.Int, mask: scala.collection.generic.BitOperations.Int.Int, left: scala.collection.immutable.IntMap[T], right: scala.collection.immutable.IntMap[T]): scala.collection.immutable.IntMap.Bin[T] = { /* compiled code */ }
    def unapply[T](x$0: scala.collection.immutable.IntMap.Bin[T]): scala.Option[scala.Tuple4[scala.collection.generic.BitOperations.Int.Int, scala.collection.generic.BitOperations.Int.Int, scala.collection.immutable.IntMap[T], scala.collection.immutable.IntMap[T]]] = { /* compiled code */ }
  }
}
