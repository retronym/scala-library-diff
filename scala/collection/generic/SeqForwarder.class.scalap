package scala.collection.generic
@scala.deprecated("Forwarding is inherently unreliable since it is not automated and new methods can be forgotten.")
trait SeqForwarder[+A] extends scala.AnyRef with scala.collection.Seq[A] with scala.collection.generic.IterableForwarder[A] {
  def $init$(): scala.Unit = { /* compiled code */ }
  protected override def underlying: scala.collection.Seq[A]
  override def length: scala.Int = { /* compiled code */ }
  override def apply(idx: scala.Int): A = { /* compiled code */ }
  override def lengthCompare(len: scala.Int): scala.Int = { /* compiled code */ }
  override def isDefinedAt(x: scala.Int): scala.Boolean = { /* compiled code */ }
  override def segmentLength(p: scala.Function1[A, scala.Boolean], from: scala.Int): scala.Int = { /* compiled code */ }
  override def prefixLength(p: scala.Function1[A, scala.Boolean]): scala.Int = { /* compiled code */ }
  override def indexWhere(p: scala.Function1[A, scala.Boolean]): scala.Int = { /* compiled code */ }
  override def indexWhere(p: scala.Function1[A, scala.Boolean], from: scala.Int): scala.Int = { /* compiled code */ }
  override def indexOf[B >: A](elem: B): scala.Int = { /* compiled code */ }
  override def indexOf[B >: A](elem: B, from: scala.Int): scala.Int = { /* compiled code */ }
  override def lastIndexOf[B >: A](elem: B): scala.Int = { /* compiled code */ }
  override def lastIndexOf[B >: A](elem: B, end: scala.Int): scala.Int = { /* compiled code */ }
  override def lastIndexWhere(p: scala.Function1[A, scala.Boolean]): scala.Int = { /* compiled code */ }
  override def lastIndexWhere(p: scala.Function1[A, scala.Boolean], end: scala.Int): scala.Int = { /* compiled code */ }
  override def reverseIterator: scala.collection.Iterator[A] = { /* compiled code */ }
  override def startsWith[B](that: scala.collection.GenSeq[B], offset: scala.Int): scala.Boolean = { /* compiled code */ }
  override def startsWith[B](that: scala.collection.GenSeq[B]): scala.Boolean = { /* compiled code */ }
  override def endsWith[B](that: scala.collection.GenSeq[B]): scala.Boolean = { /* compiled code */ }
  override def indexOfSlice[B >: A](that: scala.collection.GenSeq[B]): scala.Int = { /* compiled code */ }
  override def indexOfSlice[B >: A](that: scala.collection.GenSeq[B], from: scala.Int): scala.Int = { /* compiled code */ }
  override def lastIndexOfSlice[B >: A](that: scala.collection.GenSeq[B]): scala.Int = { /* compiled code */ }
  override def lastIndexOfSlice[B >: A](that: scala.collection.GenSeq[B], end: scala.Int): scala.Int = { /* compiled code */ }
  override def containsSlice[B](that: scala.collection.GenSeq[B]): scala.Boolean = { /* compiled code */ }
  override def contains[A1 >: A](elem: A1): scala.Boolean = { /* compiled code */ }
  override def corresponds[B](that: scala.collection.GenSeq[B])(p: scala.Function2[A, B, scala.Boolean]): scala.Boolean = { /* compiled code */ }
  override def indices: scala.collection.immutable.Range = { /* compiled code */ }
}
