package scala.collection.generic
trait IsTraversableOnce[Repr] extends scala.AnyRef {
  type A
  val conversion: scala.Function1[Repr, scala.collection.GenTraversableOnce[A]]
}
object IsTraversableOnce extends scala.AnyRef {
  def this() = { /* compiled code */ }
  implicit val stringRepr: scala.collection.generic.IsTraversableOnce[scala.Predef.String] = { /* compiled code */ }
  implicit def genTraversableLikeRepr[C[_], A0](implicit conv: scala.Function1[C[A0], scala.collection.GenTraversableOnce[A0]]): scala.collection.generic.IsTraversableOnce[C[A0]] = { /* compiled code */ }
}
