package scala.collection.generic
abstract class GenMapFactory[CC[A, B] <: scala.collection.GenMap[A, B] with scala.collection.GenMapLike[A, B, CC[A, B]]] extends scala.AnyRef {
  def this() = { /* compiled code */ }
  type Coll = CC[_, _]
  def empty[A, B]: CC[A, B]
  def apply[A, B](elems: scala.Tuple2[A, B]*): CC[A, B] = { /* compiled code */ }
  def newBuilder[A, B]: scala.collection.mutable.Builder[scala.Tuple2[A, B], CC[A, B]] = { /* compiled code */ }
  class MapCanBuildFrom[A, B] extends scala.AnyRef with scala.collection.generic.CanBuildFrom[Coll, scala.Tuple2[A, B], CC[A, B]] {
    def this() = { /* compiled code */ }
    def apply(from: Coll): scala.collection.mutable.Builder[scala.Tuple2[A, B], CC[A, B]] = { /* compiled code */ }
    def apply(): scala.collection.mutable.Builder[scala.Tuple2[A, B], CC[A, B]] = { /* compiled code */ }
  }
}
