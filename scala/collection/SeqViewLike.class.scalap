package scala.collection
trait SeqViewLike[+A, +Coll, +This <: scala.collection.SeqView[A, Coll] with scala.collection.SeqViewLike[A, Coll, This]] extends scala.AnyRef with scala.collection.Seq[A] with scala.collection.SeqLike[A, This] with scala.collection.IterableView[A, Coll] with scala.collection.IterableViewLike[A, Coll, This] {
 this: scala.collection.SeqViewLike[A, Coll, This] =>
  def $init$(): scala.Unit = { /* compiled code */ }
  private[collection] abstract class AbstractTransformed[+B] extends scala.AnyRef with scala.collection.Seq[B] with scala.collection.IterableViewLike.Transformed[B] with scala.collection.SeqViewLike.Transformed[B] {
    def this() = { /* compiled code */ }
  }
  trait Transformed[+B] extends scala.AnyRef with scala.collection.SeqView[B, Coll] with scala.collection.IterableViewLike.Transformed[B] {
    def $init$(): scala.Unit = { /* compiled code */ }
    def length: scala.Int
    def apply(idx: scala.Int): B
    override def toString(): java.lang.String = { /* compiled code */ }
  }
  trait EmptyView extends scala.AnyRef with scala.collection.SeqViewLike.Transformed[scala.Nothing] with scala.collection.IterableViewLike.EmptyView {
    def $init$(): scala.Unit = { /* compiled code */ }
    final override def length: scala.Int = { /* compiled code */ }
    final override def apply(n: scala.Int): scala.Nothing = { /* compiled code */ }
  }
  trait Forced[B] extends scala.AnyRef with scala.collection.IterableViewLike.Forced[B] with scala.collection.SeqViewLike.Transformed[B] {
    def $init$(): scala.Unit = { /* compiled code */ }
    def length: scala.Int = { /* compiled code */ }
    def apply(idx: scala.Int): B = { /* compiled code */ }
  }
  trait Sliced extends scala.AnyRef with scala.collection.IterableViewLike.Sliced with scala.collection.SeqViewLike.Transformed[A] {
    def $init$(): scala.Unit = { /* compiled code */ }
    def length: scala.Int = { /* compiled code */ }
    def apply(idx: scala.Int): A = { /* compiled code */ }
    override def foreach[U](f: scala.Function1[A, U]): scala.Unit = { /* compiled code */ }
    override def iterator: scala.collection.Iterator[A] = { /* compiled code */ }
  }
  trait Mapped[B] extends scala.AnyRef with scala.collection.IterableViewLike.Mapped[B] with scala.collection.SeqViewLike.Transformed[B] {
    def $init$(): scala.Unit = { /* compiled code */ }
    def length: scala.Int = { /* compiled code */ }
    def apply(idx: scala.Int): B = { /* compiled code */ }
  }
  trait FlatMapped[B] extends scala.AnyRef with scala.collection.IterableViewLike.FlatMapped[B] with scala.collection.SeqViewLike.Transformed[B] {
    def $init$(): scala.Unit = { /* compiled code */ }
    def length: scala.Int = { /* compiled code */ }
    def apply(idx: scala.Int): B = { /* compiled code */ }
  }
  trait Appended[B >: A] extends scala.AnyRef with scala.collection.IterableViewLike.Appended[B] with scala.collection.SeqViewLike.Transformed[B] {
    def $init$(): scala.Unit = { /* compiled code */ }
    def length: scala.Int = { /* compiled code */ }
    def apply(idx: scala.Int): B = { /* compiled code */ }
  }
  trait Filtered extends scala.AnyRef with scala.collection.IterableViewLike.Filtered with scala.collection.SeqViewLike.Transformed[A] {
    def $init$(): scala.Unit = { /* compiled code */ }
    def length: scala.Int = { /* compiled code */ }
    def apply(idx: scala.Int): A = { /* compiled code */ }
  }
  trait TakenWhile extends scala.AnyRef with scala.collection.IterableViewLike.TakenWhile with scala.collection.SeqViewLike.Transformed[A] {
    def $init$(): scala.Unit = { /* compiled code */ }
    def length: scala.Int = { /* compiled code */ }
    def apply(idx: scala.Int): A = { /* compiled code */ }
  }
  trait DroppedWhile extends scala.AnyRef with scala.collection.IterableViewLike.DroppedWhile with scala.collection.SeqViewLike.Transformed[A] {
    def $init$(): scala.Unit = { /* compiled code */ }
    def length: scala.Int = { /* compiled code */ }
    def apply(idx: scala.Int): A = { /* compiled code */ }
  }
  trait Zipped[B] extends scala.AnyRef with scala.collection.IterableViewLike.Zipped[B] with scala.collection.SeqViewLike.Transformed[scala.Tuple2[A, B]] {
    def $init$(): scala.Unit = { /* compiled code */ }
    def length: scala.Int = { /* compiled code */ }
    def apply(idx: scala.Int): scala.Tuple2[A, B] = { /* compiled code */ }
  }
  trait ZippedAll[A1 >: A, B] extends scala.AnyRef with scala.collection.IterableViewLike.ZippedAll[A1, B] with scala.collection.SeqViewLike.Transformed[scala.Tuple2[A1, B]] {
    def $init$(): scala.Unit = { /* compiled code */ }
    def length: scala.Int = { /* compiled code */ }
    def apply(idx: scala.Int): scala.Tuple2[A1, B] = { /* compiled code */ }
  }
  trait Reversed extends scala.AnyRef with scala.collection.SeqViewLike.Transformed[A] {
    def $init$(): scala.Unit = { /* compiled code */ }
    override def iterator: scala.collection.Iterator[A] = { /* compiled code */ }
    def length: scala.Int = { /* compiled code */ }
    def apply(idx: scala.Int): A = { /* compiled code */ }
  }
  trait Patched[B >: A] extends scala.AnyRef with scala.collection.SeqViewLike.Transformed[B] {
    def $init$(): scala.Unit = { /* compiled code */ }
    override def iterator: scala.collection.Iterator[B] = { /* compiled code */ }
    def length: scala.Int = { /* compiled code */ }
    def apply(idx: scala.Int): B = { /* compiled code */ }
  }
  trait Prepended[B >: A] extends scala.AnyRef with scala.collection.SeqViewLike.Transformed[B] {
    def $init$(): scala.Unit = { /* compiled code */ }
    override def iterator: scala.collection.Iterator[B] = { /* compiled code */ }
    def length: scala.Int = { /* compiled code */ }
    def apply(idx: scala.Int): B = { /* compiled code */ }
  }
  protected override def newForced[B](xs: => scala.collection.GenSeq[B]): scala.collection.SeqViewLike.Transformed[B] = { /* compiled code */ }
  protected override def newAppended[B >: A](that: scala.collection.GenTraversable[B]): scala.collection.SeqViewLike.Transformed[B] = { /* compiled code */ }
  protected override def newMapped[B](f: scala.Function1[A, B]): scala.collection.SeqViewLike.Transformed[B] = { /* compiled code */ }
  protected override def newFlatMapped[B](f: scala.Function1[A, scala.collection.GenTraversableOnce[B]]): scala.collection.SeqViewLike.Transformed[B] = { /* compiled code */ }
  protected override def newFiltered(p: scala.Function1[A, scala.Boolean]): scala.collection.SeqViewLike.Transformed[A] = { /* compiled code */ }
  protected override def newSliced(_endpoints: scala.collection.generic.SliceInterval): scala.collection.SeqViewLike.Transformed[A] = { /* compiled code */ }
  protected override def newDroppedWhile(p: scala.Function1[A, scala.Boolean]): scala.collection.SeqViewLike.Transformed[A] = { /* compiled code */ }
  protected override def newTakenWhile(p: scala.Function1[A, scala.Boolean]): scala.collection.SeqViewLike.Transformed[A] = { /* compiled code */ }
  protected override def newZipped[B](that: scala.collection.GenIterable[B]): scala.collection.SeqViewLike.Transformed[scala.Tuple2[A, B]] = { /* compiled code */ }
  protected override def newZippedAll[A1 >: A, B](that: scala.collection.GenIterable[B], _thisElem: A1, _thatElem: B): scala.collection.SeqViewLike.Transformed[scala.Tuple2[A1, B]] = { /* compiled code */ }
  protected def newReversed: scala.collection.SeqViewLike.Transformed[A] = { /* compiled code */ }
  protected def newPatched[B >: A](_from: scala.Int, _patch: scala.collection.GenSeq[B], _replaced: scala.Int): scala.collection.SeqViewLike.Transformed[B] = { /* compiled code */ }
  protected def newPrepended[B >: A](elem: B): scala.collection.SeqViewLike.Transformed[B] = { /* compiled code */ }
  protected override def newTaken(n: scala.Int): scala.collection.SeqViewLike.Transformed[A] = { /* compiled code */ }
  protected override def newDropped(n: scala.Int): scala.collection.SeqViewLike.Transformed[A] = { /* compiled code */ }
  override def reverse: This = { /* compiled code */ }
  override def patch[B >: A, That](from: scala.Int, patch: scala.collection.GenSeq[B], replaced: scala.Int)(implicit bf: scala.collection.generic.CanBuildFrom[This, B, That]): That = { /* compiled code */ }
  override def padTo[B >: A, That](len: scala.Int, elem: B)(implicit bf: scala.collection.generic.CanBuildFrom[This, B, That]): That = { /* compiled code */ }
  override def reverseMap[B, That](f: scala.Function1[A, B])(implicit bf: scala.collection.generic.CanBuildFrom[This, B, That]): That = { /* compiled code */ }
  override def updated[B >: A, That](index: scala.Int, elem: B)(implicit bf: scala.collection.generic.CanBuildFrom[This, B, That]): That = { /* compiled code */ }
  override def +:[B >: A, That](elem: B)(implicit bf: scala.collection.generic.CanBuildFrom[This, B, That]): That = { /* compiled code */ }
  override def :+[B >: A, That](elem: B)(implicit bf: scala.collection.generic.CanBuildFrom[This, B, That]): That = { /* compiled code */ }
  override def union[B >: A, That](that: scala.collection.GenSeq[B])(implicit bf: scala.collection.generic.CanBuildFrom[This, B, That]): That = { /* compiled code */ }
  override def diff[B >: A](that: scala.collection.GenSeq[B]): This = { /* compiled code */ }
  override def intersect[B >: A](that: scala.collection.GenSeq[B]): This = { /* compiled code */ }
  override def sorted[B >: A](implicit ord: scala.Ordering[B]): This = { /* compiled code */ }
  override def sortWith(lt: scala.Function2[A, A, scala.Boolean]): This = { /* compiled code */ }
  override def sortBy[B](f: scala.Function1[A, B])(implicit ord: scala.Ordering[B]): This = { /* compiled code */ }
  override def combinations(n: scala.Int): scala.collection.Iterator[This] = { /* compiled code */ }
  override def permutations: scala.collection.Iterator[This] = { /* compiled code */ }
  override def distinct: This = { /* compiled code */ }
  override def stringPrefix: java.lang.String = { /* compiled code */ }
}
