package scala.collection
trait GenSeqLike[+A, +Repr] extends scala.Any with scala.collection.GenIterableLike[A, Repr] with scala.Equals with scala.collection.Parallelizable[A, scala.collection.parallel.ParSeq[A]] {
  def $init$(): scala.Unit = { /* compiled code */ }
  def seq: scala.collection.Seq[A]
  def apply(idx: scala.Int): A
  def length: scala.Int
  def isDefinedAt(idx: scala.Int): scala.Boolean = { /* compiled code */ }
  def segmentLength(p: scala.Function1[A, scala.Boolean], from: scala.Int): scala.Int
  def prefixLength(p: scala.Function1[A, scala.Boolean]): scala.Int = { /* compiled code */ }
  def indexWhere(p: scala.Function1[A, scala.Boolean], from: scala.Int): scala.Int
  def indexWhere(p: scala.Function1[A, scala.Boolean]): scala.Int = { /* compiled code */ }
  def indexOf[B >: A](elem: B): scala.Int = { /* compiled code */ }
  def indexOf[B >: A](elem: B, from: scala.Int): scala.Int = { /* compiled code */ }
  def lastIndexOf[B >: A](elem: B): scala.Int = { /* compiled code */ }
  def lastIndexOf[B >: A](elem: B, end: scala.Int): scala.Int = { /* compiled code */ }
  def lastIndexWhere(p: scala.Function1[A, scala.Boolean]): scala.Int = { /* compiled code */ }
  def lastIndexWhere(p: scala.Function1[A, scala.Boolean], end: scala.Int): scala.Int
  def reverse: Repr
  def reverseMap[B, That](f: scala.Function1[A, B])(implicit bf: scala.collection.generic.CanBuildFrom[Repr, B, That]): That
  def startsWith[B](that: scala.collection.GenSeq[B]): scala.Boolean = { /* compiled code */ }
  def startsWith[B](that: scala.collection.GenSeq[B], offset: scala.Int): scala.Boolean
  def endsWith[B](that: scala.collection.GenSeq[B]): scala.Boolean
  def patch[B >: A, That](from: scala.Int, patch: scala.collection.GenSeq[B], replaced: scala.Int)(implicit bf: scala.collection.generic.CanBuildFrom[Repr, B, That]): That
  def updated[B >: A, That](index: scala.Int, elem: B)(implicit bf: scala.collection.generic.CanBuildFrom[Repr, B, That]): That
  def +:[B >: A, That](elem: B)(implicit bf: scala.collection.generic.CanBuildFrom[Repr, B, That]): That
  def :+[B >: A, That](elem: B)(implicit bf: scala.collection.generic.CanBuildFrom[Repr, B, That]): That
  def padTo[B >: A, That](len: scala.Int, elem: B)(implicit bf: scala.collection.generic.CanBuildFrom[Repr, B, That]): That
  def corresponds[B](that: scala.collection.GenSeq[B])(p: scala.Function2[A, B, scala.Boolean]): scala.Boolean
  def toSeq: scala.collection.GenSeq[A]
  def union[B >: A, That](that: scala.collection.GenSeq[B])(implicit bf: scala.collection.generic.CanBuildFrom[Repr, B, That]): That = { /* compiled code */ }
  def diff[B >: A](that: scala.collection.GenSeq[B]): Repr
  def intersect[B >: A](that: scala.collection.GenSeq[B]): Repr
  def distinct: Repr
  override def hashCode(): scala.Int = { /* compiled code */ }
  override def equals(that: scala.Any): scala.Boolean = { /* compiled code */ }
}
