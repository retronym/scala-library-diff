package scala.collection
trait GenIterable[+A] extends scala.AnyRef with scala.collection.GenIterableLike[A, scala.collection.GenIterable[A]] with scala.collection.GenTraversable[A] with scala.collection.generic.GenericTraversableTemplate[A, scala.collection.GenIterable] {
  def $init$(): scala.Unit = { /* compiled code */ }
  def seq: scala.collection.Iterable[A]
  override def companion: scala.collection.generic.GenericCompanion[scala.collection.GenIterable] = { /* compiled code */ }
}
object GenIterable extends scala.collection.generic.GenTraversableFactory[scala.collection.GenIterable] {
  def this() = { /* compiled code */ }
  implicit def canBuildFrom[A]: scala.collection.generic.GenTraversableFactory.GenericCanBuildFrom[A] = { /* compiled code */ }
  def newBuilder[A]: scala.collection.mutable.Builder[A, scala.collection.Iterable[A]] = { /* compiled code */ }
}
