package scala.collection.parallel.immutable
trait ParSet[T] extends scala.AnyRef with scala.collection.GenSet[T] with scala.collection.generic.GenericParTemplate[T, scala.collection.parallel.immutable.ParSet] with scala.collection.parallel.ParSet[T] with scala.collection.parallel.immutable.ParIterable[T] with scala.collection.parallel.ParSetLike[T, scala.collection.parallel.immutable.ParSet[T], scala.collection.immutable.Set[T]] {
 this: scala.collection.parallel.immutable.ParSet[T] =>
  def $init$(): scala.Unit = { /* compiled code */ }
  override def empty: scala.collection.parallel.immutable.ParSet[T] = { /* compiled code */ }
  override def companion: scala.collection.generic.GenericCompanion[scala.collection.parallel.immutable.ParSet] with scala.collection.generic.GenericParCompanion[scala.collection.parallel.immutable.ParSet] = { /* compiled code */ }
  override def stringPrefix: java.lang.String = { /* compiled code */ }
  override def toSet[U >: T]: scala.collection.parallel.immutable.ParSet[U] = { /* compiled code */ }
}
object ParSet extends scala.collection.generic.ParSetFactory[scala.collection.parallel.immutable.ParSet] {
  def this() = { /* compiled code */ }
  def newCombiner[T]: scala.collection.parallel.Combiner[T, scala.collection.parallel.immutable.ParSet[T]] = { /* compiled code */ }
  implicit def canBuildFrom[T]: scala.collection.generic.CanCombineFrom[scala.collection.generic.GenericCompanion.Coll, T, scala.collection.parallel.immutable.ParSet[T]] = { /* compiled code */ }
}
