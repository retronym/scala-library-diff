package scala.collection.parallel
trait ParMap[K, +V] extends scala.AnyRef with scala.collection.GenMap[K, V] with scala.collection.generic.GenericParMapTemplate[K, V, scala.collection.parallel.ParMap] with scala.collection.parallel.ParIterable[scala.Tuple2[K, V]] with scala.collection.parallel.ParMapLike[K, V, scala.collection.parallel.ParMap[K, V], scala.collection.Map[K, V]] {
 this: scala.collection.parallel.ParMap[K, V] =>
  def $init$(): scala.Unit = { /* compiled code */ }
  def mapCompanion: scala.collection.generic.GenericParMapCompanion[scala.collection.parallel.ParMap] = { /* compiled code */ }
  def empty: scala.collection.parallel.ParMap[K, V] = { /* compiled code */ }
  override def stringPrefix: java.lang.String = { /* compiled code */ }
  override def updated[U >: V](key: K, value: U): scala.collection.parallel.ParMap[K, U] = { /* compiled code */ }
  def +[U >: V](kv: scala.Tuple2[K, U]): scala.collection.parallel.ParMap[K, U]
}
object ParMap extends scala.collection.generic.ParMapFactory[scala.collection.parallel.ParMap] {
  def this() = { /* compiled code */ }
  def empty[K, V]: scala.collection.parallel.ParMap[K, V] = { /* compiled code */ }
  def newCombiner[K, V]: scala.collection.parallel.Combiner[scala.Tuple2[K, V], scala.collection.parallel.ParMap[K, V]] = { /* compiled code */ }
  implicit def canBuildFrom[K, V]: scala.collection.generic.CanCombineFrom[scala.collection.generic.GenMapFactory.Coll, scala.Tuple2[K, V], scala.collection.parallel.ParMap[K, V]] = { /* compiled code */ }
  abstract class WithDefault[A, +B] extends scala.AnyRef with scala.collection.parallel.ParMap[A, B] {
    def this(underlying: scala.collection.parallel.ParMap[A, B], d: scala.Function1[A, B]) = { /* compiled code */ }
    override def size: scala.Int = { /* compiled code */ }
    def get(key: A): scala.Option[B] = { /* compiled code */ }
    def splitter: scala.collection.parallel.IterableSplitter[scala.Tuple2[A, B]] = { /* compiled code */ }
    override def default(key: A): B = { /* compiled code */ }
  }
}
