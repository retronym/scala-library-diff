package scala.collection.parallel.mutable
trait ParHashTable[K, Entry >: scala.Null <: scala.collection.mutable.HashEntry[K, Entry]] extends scala.AnyRef with scala.collection.mutable.HashTable[K, Entry] {
  def $init$(): scala.Unit = { /* compiled code */ }
  override def alwaysInitSizeMap: scala.Boolean = { /* compiled code */ }
  abstract class EntryIterator[T, +IterRepr <: scala.collection.parallel.IterableSplitter[T]] extends scala.AnyRef with scala.collection.parallel.IterableSplitter[T] with scala.collection.parallel.mutable.SizeMapUtils {
    def this(idx: scala.Int, until: scala.Int, totalsize: scala.Int, es: Entry) = { /* compiled code */ }
    def entry2item(e: Entry): T
    def newIterator(idxFrom: scala.Int, idxUntil: scala.Int, totalSize: scala.Int, es: Entry): IterRepr
    def hasNext: scala.Boolean = { /* compiled code */ }
    def next(): T = { /* compiled code */ }
    def scan(): scala.Unit = { /* compiled code */ }
    def remaining: scala.Int = { /* compiled code */ }
    private[parallel] override def debugInformation: scala.Predef.String = { /* compiled code */ }
    def dup: IterRepr = { /* compiled code */ }
    def split: scala.collection.Seq[scala.collection.parallel.IterableSplitter[T]] = { /* compiled code */ }
    protected def countElems(from: scala.Int, until: scala.Int): scala.Int = { /* compiled code */ }
    protected def countBucketSizes(fromBucket: scala.Int, untilBucket: scala.Int): scala.Int = { /* compiled code */ }
  }
}
