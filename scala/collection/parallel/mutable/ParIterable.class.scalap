package scala.collection.parallel.mutable
trait ParIterable[T] extends scala.AnyRef with scala.collection.GenIterable[T] with scala.collection.parallel.ParIterable[T] with scala.collection.generic.GenericParTemplate[T, scala.collection.parallel.mutable.ParIterable] with scala.collection.parallel.ParIterableLike[T, scala.collection.parallel.mutable.ParIterable[T], scala.collection.Iterable[T]] with scala.Mutable {
  def $init$(): scala.Unit = { /* compiled code */ }
  override def companion: scala.collection.generic.GenericCompanion[scala.collection.parallel.mutable.ParIterable] with scala.collection.generic.GenericParCompanion[scala.collection.parallel.mutable.ParIterable] = { /* compiled code */ }
  override def toIterable: scala.collection.parallel.mutable.ParIterable[T] = { /* compiled code */ }
  override def toSeq: scala.collection.parallel.mutable.ParSeq[T] = { /* compiled code */ }
  def seq: scala.collection.mutable.Iterable[T]
}
object ParIterable extends scala.collection.generic.ParFactory[scala.collection.parallel.mutable.ParIterable] {
  def this() = { /* compiled code */ }
  implicit def canBuildFrom[T]: scala.collection.generic.CanCombineFrom[scala.collection.generic.GenericCompanion.Coll, T, scala.collection.parallel.mutable.ParIterable[T]] = { /* compiled code */ }
  def newBuilder[T]: scala.collection.parallel.Combiner[T, scala.collection.parallel.mutable.ParIterable[T]] = { /* compiled code */ }
  def newCombiner[T]: scala.collection.parallel.Combiner[T, scala.collection.parallel.mutable.ParIterable[T]] = { /* compiled code */ }
}
