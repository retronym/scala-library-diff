package scala.collection.parallel
trait ParSeq[+T] extends scala.AnyRef with scala.collection.GenSeq[T] with scala.collection.parallel.ParIterable[T] with scala.collection.generic.GenericParTemplate[T, scala.collection.parallel.ParSeq] with scala.collection.parallel.ParSeqLike[T, scala.collection.parallel.ParSeq[T], scala.Seq[T]] {
  def $init$(): scala.Unit = { /* compiled code */ }
  override def companion: scala.collection.generic.GenericCompanion[scala.collection.parallel.ParSeq] with scala.collection.generic.GenericParCompanion[scala.collection.parallel.ParSeq] = { /* compiled code */ }
  def apply(i: scala.Int): T
  override def toString(): scala.Predef.String = { /* compiled code */ }
  override def stringPrefix: java.lang.String = { /* compiled code */ }
}
object ParSeq extends scala.collection.generic.ParFactory[scala.collection.parallel.ParSeq] {
  def this() = { /* compiled code */ }
  implicit def canBuildFrom[T]: scala.collection.generic.CanCombineFrom[scala.collection.generic.GenericCompanion.Coll, T, scala.collection.parallel.ParSeq[T]] = { /* compiled code */ }
  def newBuilder[T]: scala.collection.parallel.Combiner[T, scala.collection.parallel.ParSeq[T]] = { /* compiled code */ }
  def newCombiner[T]: scala.collection.parallel.Combiner[T, scala.collection.parallel.ParSeq[T]] = { /* compiled code */ }
}
