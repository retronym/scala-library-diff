package scala.collection
trait GenTraversableOnce[+A] extends scala.Any {
  def foreach[U](f: scala.Function1[A, U]): scala.Unit
  def hasDefiniteSize: scala.Boolean
  def seq: scala.collection.TraversableOnce[A]
  def size: scala.Int
  def isEmpty: scala.Boolean
  def nonEmpty: scala.Boolean
  def isTraversableAgain: scala.Boolean
  def reduce[A1 >: A](op: scala.Function2[A1, A1, A1]): A1
  def reduceOption[A1 >: A](op: scala.Function2[A1, A1, A1]): scala.Option[A1]
  def fold[A1 >: A](z: A1)(op: scala.Function2[A1, A1, A1]): A1
  def /:[B](z: B)(op: scala.Function2[B, A, B]): B
  def :\[B](z: B)(op: scala.Function2[A, B, B]): B
  def foldLeft[B](z: B)(op: scala.Function2[B, A, B]): B
  def foldRight[B](z: B)(op: scala.Function2[A, B, B]): B
  def aggregate[B](z: => B)(seqop: scala.Function2[B, A, B], combop: scala.Function2[B, B, B]): B
  def reduceRight[B >: A](op: scala.Function2[A, B, B]): B
  def reduceLeftOption[B >: A](op: scala.Function2[B, A, B]): scala.Option[B]
  def reduceRightOption[B >: A](op: scala.Function2[A, B, B]): scala.Option[B]
  def count(p: scala.Function1[A, scala.Boolean]): scala.Int
  def sum[A1 >: A](implicit num: scala.Numeric[A1]): A1
  def product[A1 >: A](implicit num: scala.Numeric[A1]): A1
  def min[A1 >: A](implicit ord: scala.Ordering[A1]): A
  def max[A1 >: A](implicit ord: scala.Ordering[A1]): A
  def maxBy[B](f: scala.Function1[A, B])(implicit cmp: scala.Ordering[B]): A
  def minBy[B](f: scala.Function1[A, B])(implicit cmp: scala.Ordering[B]): A
  def forall(pred: scala.Function1[A, scala.Boolean]): scala.Boolean
  def exists(pred: scala.Function1[A, scala.Boolean]): scala.Boolean
  def find(pred: scala.Function1[A, scala.Boolean]): scala.Option[A]
  def copyToArray[B >: A](xs: scala.Array[B]): scala.Unit
  def copyToArray[B >: A](xs: scala.Array[B], start: scala.Int): scala.Unit
  def copyToArray[B >: A](xs: scala.Array[B], start: scala.Int, len: scala.Int): scala.Unit
  def mkString(start: scala.Predef.String, sep: scala.Predef.String, end: scala.Predef.String): scala.Predef.String
  def mkString(sep: scala.Predef.String): scala.Predef.String
  def mkString: scala.Predef.String
  def toArray[A1 >: A](implicit evidence$1: scala.reflect.ClassTag[A1]): scala.Array[A1]
  def toList: scala.List[A]
  def toIndexedSeq: scala.collection.immutable.IndexedSeq[A]
  def toStream: scala.Stream[A]
  def toIterator: scala.collection.Iterator[A]
  def toBuffer[A1 >: A]: scala.collection.mutable.Buffer[A1]
  def toTraversable: scala.collection.GenTraversable[A]
  def toIterable: scala.collection.GenIterable[A]
  def toSeq: scala.collection.GenSeq[A]
  def toSet[A1 >: A]: scala.collection.GenSet[A1]
  def toMap[K, V](implicit ev: scala.Predef.<:<[A, scala.Tuple2[K, V]]): scala.collection.GenMap[K, V]
  def toVector: scala.Vector[A]
  def to[Col[_]](implicit cbf: scala.collection.generic.CanBuildFrom[scala.Nothing, A, Col[A]]): Col[A]
}
