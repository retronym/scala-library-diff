package scala.collection
trait GenSeq[+A] extends scala.AnyRef with scala.collection.GenSeqLike[A, scala.collection.GenSeq[A]] with scala.collection.GenIterable[A] with scala.Equals with scala.collection.generic.GenericTraversableTemplate[A, scala.collection.GenSeq] {
  def $init$(): scala.Unit = { /* compiled code */ }
  def seq: scala.collection.Seq[A]
  override def companion: scala.collection.generic.GenericCompanion[scala.collection.GenSeq] = { /* compiled code */ }
}
object GenSeq extends scala.collection.generic.GenTraversableFactory[scala.collection.GenSeq] {
  def this() = { /* compiled code */ }
  implicit def canBuildFrom[A]: scala.collection.generic.GenTraversableFactory.GenericCanBuildFrom[A] = { /* compiled code */ }
  def newBuilder[A]: scala.collection.mutable.Builder[A, scala.collection.Seq[A]] = { /* compiled code */ }
}
