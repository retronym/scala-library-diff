package scala.collection
trait LinearSeq[+A] extends scala.AnyRef with scala.collection.Seq[A] with scala.collection.generic.GenericTraversableTemplate[A, scala.collection.LinearSeq] with scala.collection.LinearSeqLike[A, scala.collection.LinearSeq[A]] {
  def $init$(): scala.Unit = { /* compiled code */ }
  override def companion: scala.collection.generic.GenericCompanion[scala.collection.LinearSeq] = { /* compiled code */ }
  override def seq: scala.collection.LinearSeq[A] = { /* compiled code */ }
}
object LinearSeq extends scala.collection.generic.SeqFactory[scala.collection.LinearSeq] {
  def this() = { /* compiled code */ }
  implicit def canBuildFrom[A]: scala.collection.generic.CanBuildFrom[scala.collection.generic.GenericCompanion.Coll, A, scala.collection.LinearSeq[A]] = { /* compiled code */ }
  def newBuilder[A]: scala.collection.mutable.Builder[A, scala.collection.LinearSeq[A]] = { /* compiled code */ }
}
