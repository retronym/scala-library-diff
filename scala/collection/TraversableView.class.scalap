package scala.collection
trait TraversableView[+A, +Coll] extends scala.AnyRef with scala.collection.TraversableViewLike[A, Coll, scala.collection.TraversableView[A, Coll]] {
}
object TraversableView extends scala.AnyRef {
  def this() = { /* compiled code */ }
  class NoBuilder[A] extends scala.AnyRef with scala.collection.mutable.Builder[A, scala.Nothing] {
    def this() = { /* compiled code */ }
    def +=(elem: A): scala.collection.TraversableView.NoBuilder.type = { /* compiled code */ }
    def iterator: scala.collection.Iterator[A] = { /* compiled code */ }
    def result(): scala.Nothing = { /* compiled code */ }
    def clear(): scala.Unit = { /* compiled code */ }
  }
  type Coll = scala.collection.TraversableView[_, C] forSome {type C <: scala.collection.Traversable[_]}
    type C <: scala.collection.Traversable[_]
    type C <: scala.collection.Traversable[_]
  implicit def canBuildFrom[A]: scala.collection.generic.CanBuildFrom[Coll, A, scala.collection.TraversableView[A, scala.collection.Traversable[_]]] = { /* compiled code */ }
}
