package scala.text
@scala.deprecated("This class will be removed.")
case class DocCons(hd: scala.text.Document, tl: scala.text.Document) extends scala.text.Document with scala.Product with scala.Serializable {
  val hd: scala.text.Document = { /* compiled code */ }
  val tl: scala.text.Document = { /* compiled code */ }
  def copy(hd: scala.text.Document, tl: scala.text.Document): scala.text.DocCons = { /* compiled code */ }
  override def productPrefix: java.lang.String = { /* compiled code */ }
  def productArity: scala.Int = { /* compiled code */ }
  def productElement(x$1: scala.Int): scala.Any = { /* compiled code */ }
  override def productIterator: scala.collection.Iterator[scala.Any] = { /* compiled code */ }
  def canEqual(x$1: scala.Any): scala.Boolean = { /* compiled code */ }
  override def hashCode(): scala.Int = { /* compiled code */ }
  override def toString(): java.lang.String = { /* compiled code */ }
  override def equals(x$1: scala.Any): scala.Boolean = { /* compiled code */ }
}
object DocCons extends scala.runtime.AbstractFunction2[scala.text.Document, scala.text.Document, scala.text.DocCons] with scala.Serializable {
  def this() = { /* compiled code */ }
  final override def toString(): java.lang.String = { /* compiled code */ }
  def apply(hd: scala.text.Document, tl: scala.text.Document): scala.text.DocCons = { /* compiled code */ }
  def unapply(x$0: scala.text.DocCons): scala.Option[scala.Tuple2[scala.text.Document, scala.text.Document]] = { /* compiled code */ }
}
