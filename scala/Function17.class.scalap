package scala
trait Function17[-T1, -T2, -T3, -T4, -T5, -T6, -T7, -T8, -T9, -T10, -T11, -T12, -T13, -T14, -T15, -T16, -T17, +R] extends scala.AnyRef {
 this: scala.Function17[T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, R] =>
  def $init$(): scala.Unit = { /* compiled code */ }
  def apply(v1: T1, v2: T2, v3: T3, v4: T4, v5: T5, v6: T6, v7: T7, v8: T8, v9: T9, v10: T10, v11: T11, v12: T12, v13: T13, v14: T14, v15: T15, v16: T16, v17: T17): R
  @scala.annotation.unspecialized
  def curried: scala.Function1[T1, scala.Function1[T2, scala.Function1[T3, scala.Function1[T4, scala.Function1[T5, scala.Function1[T6, scala.Function1[T7, scala.Function1[T8, scala.Function1[T9, scala.Function1[T10, scala.Function1[T11, scala.Function1[T12, scala.Function1[T13, scala.Function1[T14, scala.Function1[T15, scala.Function1[T16, scala.Function1[T17, R]]]]]]]]]]]]]]]]] = { /* compiled code */ }
  @scala.annotation.unspecialized
  def tupled: scala.Function1[scala.Tuple17[T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17], R] = { /* compiled code */ }
  override def toString(): java.lang.String = { /* compiled code */ }
}
