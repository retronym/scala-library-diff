package scala.util
final case class Right[+A, +B](b: B) extends scala.util.Either[A, B] with scala.Product with scala.Serializable {
  val b: B = { /* compiled code */ }
  def isLeft: scala.Boolean = { /* compiled code */ }
  def isRight: scala.Boolean = { /* compiled code */ }
  def copy[A, B](b: B): scala.util.Right[A, B] = { /* compiled code */ }
  override def productPrefix: java.lang.String = { /* compiled code */ }
  def productArity: scala.Int = { /* compiled code */ }
  def productElement(x$1: scala.Int): scala.Any = { /* compiled code */ }
  override def productIterator: scala.collection.Iterator[scala.Any] = { /* compiled code */ }
  def canEqual(x$1: scala.Any): scala.Boolean = { /* compiled code */ }
  override def hashCode(): scala.Int = { /* compiled code */ }
  override def toString(): java.lang.String = { /* compiled code */ }
  override def equals(x$1: scala.Any): scala.Boolean = { /* compiled code */ }
}
object Right extends scala.AnyRef with scala.Serializable {
  def this() = { /* compiled code */ }
  final override def toString(): java.lang.String = { /* compiled code */ }
  def apply[A, B](b: B): scala.util.Right[A, B] = { /* compiled code */ }
  def unapply[A, B](x$0: scala.util.Right[A, B]): scala.Option[B] = { /* compiled code */ }
}
